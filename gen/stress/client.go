// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stress client
//
// Command:
// $ goa gen github.com/ikawaha/kagome-stress/design

package stress

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "stress" service client.
type Client struct {
	StartEndpoint    goa.Endpoint
	StopEndpoint     goa.Endpoint
	TokenizeEndpoint goa.Endpoint
}

// NewClient initializes a "stress" service client given the endpoints.
func NewClient(start, stop, tokenize goa.Endpoint) *Client {
	return &Client{
		StartEndpoint:    start,
		StopEndpoint:     stop,
		TokenizeEndpoint: tokenize,
	}
}

// Start calls the "start" endpoint of the "stress" service.
func (c *Client) Start(ctx context.Context) (err error) {
	_, err = c.StartEndpoint(ctx, nil)
	return
}

// Stop calls the "stop" endpoint of the "stress" service.
func (c *Client) Stop(ctx context.Context) (err error) {
	_, err = c.StopEndpoint(ctx, nil)
	return
}

// Tokenize calls the "tokenize" endpoint of the "stress" service.
func (c *Client) Tokenize(ctx context.Context, p *TokenizePayload) (res TokenCollection, err error) {
	var ires interface{}
	ires, err = c.TokenizeEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(TokenCollection), nil
}
