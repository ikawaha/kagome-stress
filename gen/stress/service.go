// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stress service
//
// Command:
// $ goa gen github.com/ikawaha/kagome-stress/design

package stress

import (
	"context"

	stressviews "github.com/ikawaha/kagome-stress/gen/stress/views"
)

// Stress test performs to tokenize sentences.
type Service interface {
	// Start implements start.
	Start(context.Context) (err error)
	// Stop implements stop.
	Stop(context.Context) (err error)
	// Tokenize implements tokenize.
	Tokenize(context.Context, *TokenizePayload) (res TokenCollection, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "stress"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"start", "stop", "tokenize"}

// TokenizePayload is the payload type of the stress service tokenize method.
type TokenizePayload struct {
	Sentence string
}

// TokenCollection is the result type of the stress service tokenize method.
type TokenCollection []*Token

type Token struct {
	Surface string
	Pos     string
	Start   int
	End     int
	Type    string
}

// NewTokenCollection initializes result type TokenCollection from viewed
// result type TokenCollection.
func NewTokenCollection(vres stressviews.TokenCollection) TokenCollection {
	var res TokenCollection
	switch vres.View {
	case "default", "":
		res = newTokenCollection(vres.Projected)
	}
	return res
}

// NewViewedTokenCollection initializes viewed result type TokenCollection from
// result type TokenCollection using the given view.
func NewViewedTokenCollection(res TokenCollection, view string) stressviews.TokenCollection {
	var vres stressviews.TokenCollection
	switch view {
	case "default", "":
		p := newTokenCollectionView(res)
		vres = stressviews.TokenCollection{p, "default"}
	}
	return vres
}

// newTokenCollection converts projected type TokenCollection to service type
// TokenCollection.
func newTokenCollection(vres stressviews.TokenCollectionView) TokenCollection {
	res := make(TokenCollection, len(vres))
	for i, n := range vres {
		res[i] = newToken(n)
	}
	return res
}

// newTokenCollectionView projects result type TokenCollection to projected
// type TokenCollectionView using the "default" view.
func newTokenCollectionView(res TokenCollection) stressviews.TokenCollectionView {
	vres := make(stressviews.TokenCollectionView, len(res))
	for i, n := range res {
		vres[i] = newTokenView(n)
	}
	return vres
}

// newToken converts projected type Token to service type Token.
func newToken(vres *stressviews.TokenView) *Token {
	res := &Token{}
	if vres.Surface != nil {
		res.Surface = *vres.Surface
	}
	if vres.Pos != nil {
		res.Pos = *vres.Pos
	}
	if vres.Start != nil {
		res.Start = *vres.Start
	}
	if vres.End != nil {
		res.End = *vres.End
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	return res
}

// newTokenView projects result type Token to projected type TokenView using
// the "default" view.
func newTokenView(res *Token) *stressviews.TokenView {
	vres := &stressviews.TokenView{
		Surface: &res.Surface,
		Pos:     &res.Pos,
		Start:   &res.Start,
		End:     &res.End,
		Type:    &res.Type,
	}
	return vres
}
