// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stress endpoints
//
// Command:
// $ goa gen github.com/ikawaha/kagome-stress/design

package stress

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "stress" service endpoints.
type Endpoints struct {
	Start    goa.Endpoint
	Stop     goa.Endpoint
	Tokenize goa.Endpoint
}

// NewEndpoints wraps the methods of the "stress" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Start:    NewStartEndpoint(s),
		Stop:     NewStopEndpoint(s),
		Tokenize: NewTokenizeEndpoint(s),
	}
}

// Use applies the given middleware to all the "stress" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Start = m(e.Start)
	e.Stop = m(e.Stop)
	e.Tokenize = m(e.Tokenize)
}

// NewStartEndpoint returns an endpoint function that calls the method "start"
// of service "stress".
func NewStartEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return nil, s.Start(ctx)
	}
}

// NewStopEndpoint returns an endpoint function that calls the method "stop" of
// service "stress".
func NewStopEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return nil, s.Stop(ctx)
	}
}

// NewTokenizeEndpoint returns an endpoint function that calls the method
// "tokenize" of service "stress".
func NewTokenizeEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TokenizePayload)
		res, err := s.Tokenize(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTokenCollection(res, "default")
		return vres, nil
	}
}
