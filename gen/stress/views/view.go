// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stress views
//
// Command:
// $ goa gen github.com/ikawaha/kagome-stress/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// TokenCollection is the viewed result type that is projected based on a view.
type TokenCollection struct {
	// Type to project
	Projected TokenCollectionView
	// View to render
	View string
}

// TokenCollectionView is a type that runs validations on a projected type.
type TokenCollectionView []*TokenView

// TokenView is a type that runs validations on a projected type.
type TokenView struct {
	Surface *string
	Pos     *string
	Start   *int
	End     *int
	Type    *string
}

var (
	// TokenCollectionMap is a map of attribute names in result type
	// TokenCollection indexed by view name.
	TokenCollectionMap = map[string][]string{
		"default": []string{
			"surface",
			"pos",
			"start",
			"end",
			"type",
		},
	}
	// TokenMap is a map of attribute names in result type Token indexed by view
	// name.
	TokenMap = map[string][]string{
		"default": []string{
			"surface",
			"pos",
			"start",
			"end",
			"type",
		},
	}
)

// ValidateTokenCollection runs the validations defined on the viewed result
// type TokenCollection.
func ValidateTokenCollection(result TokenCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTokenCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateTokenCollectionView runs the validations defined on
// TokenCollectionView using the "default" view.
func ValidateTokenCollectionView(result TokenCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateTokenView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTokenView runs the validations defined on TokenView using the
// "default" view.
func ValidateTokenView(result *TokenView) (err error) {
	if result.Surface == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("surface", "result"))
	}
	if result.Pos == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pos", "result"))
	}
	if result.Start == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("start", "result"))
	}
	if result.End == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("end", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	return
}
