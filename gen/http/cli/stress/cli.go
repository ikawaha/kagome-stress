// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stress HTTP client CLI support package
//
// Command:
// $ goa gen github.com/ikawaha/kagome-stress/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	stressc "github.com/ikawaha/kagome-stress/gen/http/stress/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `stress (start|stop|tokenize)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` stress start` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		stressFlags = flag.NewFlagSet("stress", flag.ContinueOnError)

		stressStartFlags = flag.NewFlagSet("start", flag.ExitOnError)

		stressStopFlags = flag.NewFlagSet("stop", flag.ExitOnError)

		stressTokenizeFlags    = flag.NewFlagSet("tokenize", flag.ExitOnError)
		stressTokenizeBodyFlag = stressTokenizeFlags.String("body", "REQUIRED", "")
	)
	stressFlags.Usage = stressUsage
	stressStartFlags.Usage = stressStartUsage
	stressStopFlags.Usage = stressStopUsage
	stressTokenizeFlags.Usage = stressTokenizeUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "stress":
			svcf = stressFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "stress":
			switch epn {
			case "start":
				epf = stressStartFlags

			case "stop":
				epf = stressStopFlags

			case "tokenize":
				epf = stressTokenizeFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "stress":
			c := stressc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "start":
				endpoint = c.Start()
				data = nil
			case "stop":
				endpoint = c.Stop()
				data = nil
			case "tokenize":
				endpoint = c.Tokenize()
				data, err = stressc.BuildTokenizePayload(*stressTokenizeBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// stressUsage displays the usage of the stress command and its subcommands.
func stressUsage() {
	fmt.Fprintf(os.Stderr, `Stress test performs to tokenize sentences.
Usage:
    %s [globalflags] stress COMMAND [flags]

COMMAND:
    start: Start implements start.
    stop: Stop implements stop.
    tokenize: Tokenize implements tokenize.

Additional help:
    %s stress COMMAND --help
`, os.Args[0], os.Args[0])
}
func stressStartUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stress start

Start implements start.

Example:
    `+os.Args[0]+` stress start
`, os.Args[0])
}

func stressStopUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stress stop

Stop implements stop.

Example:
    `+os.Args[0]+` stress stop
`, os.Args[0])
}

func stressTokenizeUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stress tokenize -body JSON

Tokenize implements tokenize.
    -body JSON: 

Example:
    `+os.Args[0]+` stress tokenize --body '{
      "sentence": "Quo esse dolor illo error."
   }'
`, os.Args[0])
}
