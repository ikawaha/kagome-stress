// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stress client HTTP transport
//
// Command:
// $ goa gen github.com/ikawaha/kagome-stress/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the stress service endpoint HTTP clients.
type Client struct {
	// Start Doer is the HTTP client used to make requests to the start endpoint.
	StartDoer goahttp.Doer

	// Stop Doer is the HTTP client used to make requests to the stop endpoint.
	StopDoer goahttp.Doer

	// Tokenize Doer is the HTTP client used to make requests to the tokenize
	// endpoint.
	TokenizeDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the stress service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		StartDoer:           doer,
		StopDoer:            doer,
		TokenizeDoer:        doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Start returns an endpoint that makes HTTP requests to the stress service
// start server.
func (c *Client) Start() goa.Endpoint {
	var (
		decodeResponse = DecodeStartResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildStartRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.StartDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("stress", "start", err)
		}
		return decodeResponse(resp)
	}
}

// Stop returns an endpoint that makes HTTP requests to the stress service stop
// server.
func (c *Client) Stop() goa.Endpoint {
	var (
		decodeResponse = DecodeStopResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildStopRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.StopDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("stress", "stop", err)
		}
		return decodeResponse(resp)
	}
}

// Tokenize returns an endpoint that makes HTTP requests to the stress service
// tokenize server.
func (c *Client) Tokenize() goa.Endpoint {
	var (
		encodeRequest  = EncodeTokenizeRequest(c.encoder)
		decodeResponse = DecodeTokenizeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildTokenizeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TokenizeDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("stress", "tokenize", err)
		}
		return decodeResponse(resp)
	}
}
