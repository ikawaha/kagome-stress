// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stress HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/ikawaha/kagome-stress/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	stress "github.com/ikawaha/kagome-stress/gen/stress"
	stressviews "github.com/ikawaha/kagome-stress/gen/stress/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildStartRequest instantiates a HTTP request object with method and path
// set to call the "stress" service "start" endpoint
func (c *Client) BuildStartRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StartStressPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("stress", "start", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeStartResponse returns a decoder for responses returned by the stress
// start endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeStartResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("stress", "start", resp.StatusCode, string(body))
		}
	}
}

// BuildStopRequest instantiates a HTTP request object with method and path set
// to call the "stress" service "stop" endpoint
func (c *Client) BuildStopRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StopStressPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("stress", "stop", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeStopResponse returns a decoder for responses returned by the stress
// stop endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeStopResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("stress", "stop", resp.StatusCode, string(body))
		}
	}
}

// BuildTokenizeRequest instantiates a HTTP request object with method and path
// set to call the "stress" service "tokenize" endpoint
func (c *Client) BuildTokenizeRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TokenizeStressPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("stress", "tokenize", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTokenizeRequest returns an encoder for requests sent to the stress
// tokenize server.
func EncodeTokenizeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*stress.TokenizePayload)
		if !ok {
			return goahttp.ErrInvalidType("stress", "tokenize", "*stress.TokenizePayload", v)
		}
		body := NewTokenizeRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("stress", "tokenize", err)
		}
		return nil
	}
}

// DecodeTokenizeResponse returns a decoder for responses returned by the
// stress tokenize endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeTokenizeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body TokenizeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("stress", "tokenize", err)
			}
			p := NewTokenizeTokenCollectionOK(body)
			view := "default"
			vres := stressviews.TokenCollection{p, view}
			if err = stressviews.ValidateTokenCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("stress", "tokenize", err)
			}
			res := stress.NewTokenCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("stress", "tokenize", resp.StatusCode, string(body))
		}
	}
}
