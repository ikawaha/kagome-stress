// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stress HTTP server types
//
// Command:
// $ goa gen github.com/ikawaha/kagome-stress/design

package server

import (
	stress "github.com/ikawaha/kagome-stress/gen/stress"
	stressviews "github.com/ikawaha/kagome-stress/gen/stress/views"
	goa "goa.design/goa/v3/pkg"
)

// TokenizeRequestBody is the type of the "stress" service "tokenize" endpoint
// HTTP request body.
type TokenizeRequestBody struct {
	Sentence *string `form:"sentence,omitempty" json:"sentence,omitempty" xml:"sentence,omitempty"`
}

// TokenResponseCollection is the type of the "stress" service "tokenize"
// endpoint HTTP response body.
type TokenResponseCollection []*TokenResponse

// TokenResponse is used to define fields on response body types.
type TokenResponse struct {
	Surface string `form:"surface" json:"surface" xml:"surface"`
	Pos     string `form:"pos" json:"pos" xml:"pos"`
	Start   int    `form:"start" json:"start" xml:"start"`
	End     int    `form:"end" json:"end" xml:"end"`
	Type    string `form:"type" json:"type" xml:"type"`
}

// NewTokenResponseCollection builds the HTTP response body from the result of
// the "tokenize" endpoint of the "stress" service.
func NewTokenResponseCollection(res stressviews.TokenCollectionView) TokenResponseCollection {
	body := make([]*TokenResponse, len(res))
	for i, val := range res {
		body[i] = &TokenResponse{
			Surface: *val.Surface,
			Pos:     *val.Pos,
			Start:   *val.Start,
			End:     *val.End,
			Type:    *val.Type,
		}
	}
	return body
}

// NewTokenizePayload builds a stress service tokenize endpoint payload.
func NewTokenizePayload(body *TokenizeRequestBody) *stress.TokenizePayload {
	v := &stress.TokenizePayload{
		Sentence: *body.Sentence,
	}
	return v
}

// ValidateTokenizeRequestBody runs the validations defined on
// TokenizeRequestBody
func ValidateTokenizeRequestBody(body *TokenizeRequestBody) (err error) {
	if body.Sentence == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sentence", "body"))
	}
	return
}
